For the Onion Service:
	- sign the Onion Service descriptor
		ECDSA {
		   privkey := private part of the key in its address
		}

	- verify one-time secret + rdv address ??
	
	- connect to the rdv point
		trame?
	

For the client:
	- verify a descriptor signature (with the address of the service)
	- send a one-time secret to the rendez-vous point
	- send the same one-time secret and the rendez-vous address to the service through one of the introduction points



For the rendez-vous point:
	- match the secrets from both sides
		

Sources : 
https://github.com/ecies/py
https://pypi.org/project/secp256k1/
https://www.quickprogrammingtips.com/python/aes-256-encryption-and-decryption-in-python.html
https://stackoverflow.com/questions/34653875/python-how-to-send-data-over-tcp
https://github.com/Attacks-on-Tor/Attacks-on-Tor


Pour signer :
	from secp256k1 import PrivateKey
	key = PrivateKey()

	base64.b64encode(key.ecdsa_serialize_compact(key.ecdsa_sign(b'bibiuiuhiuh')))


Pour chiffrer avec ECIES :
	from ecies import encrypt
	encrypt('0x' + key.pubkey.serialize().hex(), b'bygbybiu')


Pour déchiffrer avec ECIES et récupérer la clé AES :
	decrypt('0x'+key.serialize(), base64.b64decode(c))


Pour exporter la clé publique :
	base64.b64encode(key.pubkey.serialize())


Trame pour la distribution des clés:
	{'action': 'key_establishment', 'enc_message': SOME_ENCRYPTED_MESSAGE}
	le message:
	{'dest': DESTINATAIRE, 'm': LA CLE}

	Différents cas:
		- noeud du milieu dans la connexion :
			reçoit la clé pour l'aller : 		DESTINATAIRE := {"ip": "to", "port": 0}
			reçoit la clé pour le retour : 		DESTINATAIRE := {"ip": addresse du prochain noeud, "port": port du prochain noeud }
		- pour le dernier noeud de la connexion :
			reçoit sa clé :						DESTINATAIRE := {"ip": "destination", "port": 0}
			reçoit les clés pour le retour : 	DESTINATAIRE := {"ip": "back", "port": 0}

Trame pour les relais:
	{'action': 'relay_to' ou 'relay_from', 'enc_message': SOME_ENCRYPTED_MESSAGE}
	le message:
	{'dest': "{addresse du prochain noeud}", 'm': LE MESSAGE}




PROBLEMES A RESOUDRE:
	- procédure pour fermer les connexions entre les noeuds
	- ya moyen que ça soit pas les bonnes adresses à chaque fois dans les messages
	- comment on récupère l'adresse du prochain noeud dans la connexion? pour l'instant: donnée au début avec les clefs (possiblement erreurs de port)


FAILLES POSSIBLES:
	- taille des paquets
	- assez de relais contrôlés